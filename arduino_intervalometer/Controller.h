#ifndef CONTROLLER_H
#define CONTROLLER_H

#include <RTCZero.h>
#include <ctime>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EncoderButton.h>


#include "IntervalInfo.h"
#include "State.h"

#define SCREEN_WIDTH 64 // OLED display width, in pixels
#define SCREEN_HEIGHT 128 // OLED display height, in pixels
#define ROTATE_DISPLAY

#define LED_RED_PIN 13

#define ICON_WIDTH 7
#define ICON_HEIGHT 11

#define UNLOCK_ICON_WIDTH 11
#define UNLOCK_ICON_HEIGHT 11

#define BOOT_LOGO_WIDTH 58
#define BOOT_LOGO_HEIGHT 54

#define BATTERY_ICON_WIDTH 12
#define BATTERY_ICON_HEIGHT 9


#define SLEEP_TIMEOUT 300000





class Controller 
{
  public:
    enum ProgramState
    {
      UNSET = -1,
      NONE = 0,
      IDLE,
      RUNNING,
      SET_START_STYLE,
      SET_CLOCK,
      SET_TIME_INTERVAL,
      SET_DURATION,
      MESSAGE,
      STATE_COUNT
    };

    static Controller* GetInstance();    
    static void Initialize();

    static void WakeInterrupt();

    void Update();

    void SetState(ProgramState state);
    State* GetCurrentState();

    ProgramState GetState();
    Adafruit_SSD1306* GetDisplay();
    EncoderButton* GetKnob();
    RTCZero* GetRTC();
    IntervalInfo* GetConfig();

    void SetShutter(bool isPressed);
    void SetFocus(bool isPressed);

    bool Get24TimeFormat() { return _use24HourFormat; };
    void Set24TimeFormat(bool use24HourFormat ) { _use24HourFormat = use24HourFormat; };

    void GenerateTimeString(char* destination, uint8_t hours, uint8_t minutes, uint8_t seconds = 0);
    void GenerateTimeString(char* destination);

    unsigned long GetMillisSinceLastInput() { return millis() - _lastInputTime; };
    void ResetLastInputMillis() { _lastInputTime = millis(); }; 

    unsigned long GetMillisSinceWakeUp() { return millis() - _wakeUpTime; };
    unsigned long GetMillisInCurrentState() { return millis() - _stateEnterTime; };

    bool GetIsAsleep() { return _isAsleep; };
    void Sleep();
    void WakeUp(bool isUserInput);

    void SetDisplayState(bool isOn);
    bool GetDisplayState() { return _isDisplayOn; };

    void SetLedToSleepState() { digitalWrite(LED_RED_PIN, _isDisplayOn ? LOW : HIGH); };

    void SetOverrideLedState(bool isOn);
    void ClearOverrideLedState();

    float GetBatteryVoltage();
    const unsigned char* GetBatteryIconForCurrentVoltage();

  private:
    enum LedOverrideState
    {
      NO_OVERRIDE,
      OVERRIDE_ON,
      OVERRIDE_OFF
    };

    Controller();

    static void HandleEncoder(EncoderButton& eb);
    static void HandleClick(EncoderButton& eb); 

    static Controller* _instance;
    static volatile bool _discardInterrupts;

    void UpdateBatteryVoltage();

    IntervalInfo _config;

    State* _states[STATE_COUNT];
    ProgramState _currentProgramState = NONE;
    ProgramState _nextProgramState = UNSET;

    Adafruit_SSD1306* _display;
    EncoderButton* _knob;
    RTCZero* _rtc;

    volatile unsigned long _lastInputTime = 0;
    volatile unsigned long _wakeUpTime = 0;
    volatile bool _isAsleep = false;
    volatile bool _isDisplayOn = true;

    unsigned long _stateEnterTime = 0;
    
    bool _redrawRequired = false;
    bool _use24HourFormat = true;

    LedOverrideState _ledOverride = NO_OVERRIDE;

    void UpdateLedState();

    float _currentBatteryVoltage = 0.0f;
};



// 'end', 7x11px
const unsigned char icon_end [] PROGMEM = {
	0x00, 0x00, 0x00, 0x22, 0x12, 0xfa, 0x12, 0x22, 0x00, 0x00, 0x00
};
// 'interval', 7x11px
const unsigned char icon_interval [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x82, 0xfe, 0x82, 0x00, 0x00, 0x00, 0x00
};
// 'shutter', 7x11px
const unsigned char icon_shutter [] PROGMEM = {
	0x10, 0x10, 0x54, 0x38, 0x10, 0x00, 0x7c, 0x44, 0xfe, 0x00, 0x00
};
// 'start', 7x11px
const unsigned char icon_start [] PROGMEM = {
	0x00, 0x00, 0x00, 0x88, 0x84, 0xbe, 0x84, 0x88, 0x00, 0x00, 0x00
};

// 'false', 7x11px
const unsigned char icon_true [] PROGMEM = {
	0x00, 0x00, 0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00
};
// 'true', 7x11px
const unsigned char icon_false [] PROGMEM = {
	0x00, 0x00, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x00, 0x00
};

const unsigned char icon_count [] PROGMEM = {
  0x00, 0x00, 0x28, 0x28, 0x7c, 0x28, 0x7c, 0x28, 0x28, 0x00, 0x00
};

// 'sprite_0', 11x11px
const unsigned char icon_unlocking [] PROGMEM = {
	0x7f, 0xc0, 0xf1, 0xe0, 0xee, 0xe0, 0xee, 0xe0, 0xee, 0xe0, 0xc0, 0x60, 0xc0, 0x60, 0xc0, 0x60, 
	0xc0, 0x60, 0xc0, 0x60, 0x7f, 0xc0
};
// 'sprite_1', 11x11px
const unsigned char icon_locked [] PROGMEM = {
	0x00, 0x00, 0x0e, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x3f, 0x80, 0x3f, 0x80, 0x3f, 0x80, 
	0x3f, 0x80, 0x3f, 0x80, 0x00, 0x00
};



// 'JoeGatling', 58x54px
const unsigned char boot_logo [] PROGMEM = {
	0x00, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0xc3, 0xf0, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0xc3, 0xf0, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 
	0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc0, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc0, 0x00, 
	0xff, 0xc3, 0xc3, 0xc3, 0xc0, 0x3f, 0xc0, 0x00, 0xff, 0xc3, 0xc3, 0xc3, 0xc0, 0x3f, 0xc0, 0x00, 
	0xc3, 0xc3, 0xc3, 0xc3, 0xc0, 0x3c, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc0, 0x3c, 0x00, 0x00, 
	0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0x00, 0x00, 
	0xf0, 0x0f, 0xf0, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 0xf0, 0x0f, 0xf0, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
	0x0f, 0xff, 0x0f, 0xff, 0x3f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0x3f, 0xff, 0xc0, 0x00, 
	0x3f, 0xfc, 0x3f, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xfc, 0x3f, 0xfc, 0xff, 0xff, 0x00, 0x00, 
	0xf0, 0x0f, 0xf0, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 0xf0, 0x0f, 0xf0, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 
	0xc3, 0xc3, 0xc3, 0xc3, 0xfc, 0x3f, 0xc0, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xfc, 0x3f, 0xc0, 0x00, 
	0xc3, 0xff, 0xc3, 0xc3, 0xfc, 0x3f, 0xc0, 0x00, 0xc3, 0xff, 0xc3, 0xc3, 0xfc, 0x3f, 0xc0, 0x00, 
	0xc3, 0x03, 0xc0, 0x03, 0xcc, 0x3c, 0x00, 0x00, 0xc3, 0x03, 0xc0, 0x03, 0xcc, 0x3c, 0x00, 0x00, 
	0xc3, 0xc3, 0xc3, 0xc3, 0xcc, 0x3c, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xcc, 0x3c, 0x00, 0x00, 
	0xf0, 0x03, 0xc3, 0xc3, 0xcc, 0x3c, 0x00, 0x00, 0xf0, 0x03, 0xc3, 0xc3, 0xcc, 0x3c, 0x00, 0x00, 
	0x3f, 0xff, 0xff, 0xff, 0xcf, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xcf, 0xfc, 0x00, 0x00, 
	0x0f, 0xff, 0x3f, 0xff, 0xc3, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0x3f, 0xff, 0xc3, 0xfc, 0x00, 0x00, 
	0xff, 0x00, 0xff, 0xff, 0xfc, 0xff, 0xf0, 0x00, 0xff, 0x00, 0xff, 0xff, 0xfc, 0xff, 0xf0, 0x00, 
	0xc3, 0xc0, 0xc3, 0xc3, 0xc3, 0xf0, 0x0c, 0x00, 0xc3, 0xc0, 0xc3, 0xc3, 0xc3, 0xf0, 0x0c, 0x00, 
	0xc3, 0xc0, 0xc3, 0xc0, 0xc3, 0xc3, 0xc3, 0x00, 0xc3, 0xc0, 0xc3, 0xc0, 0xc3, 0xc3, 0xc3, 0x00, 
	0xc3, 0xc0, 0xc3, 0xc0, 0x03, 0xc3, 0xff, 0xc0, 0xc3, 0xc0, 0xc3, 0xc0, 0x03, 0xc3, 0xff, 0xc0, 
	0xc3, 0xc0, 0xc3, 0xc3, 0x03, 0xc3, 0xc3, 0xc0, 0xc3, 0xc0, 0xc3, 0xc3, 0x03, 0xc3, 0xc3, 0xc0, 
	0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc0, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc0, 
	0xc0, 0x03, 0xc3, 0xc3, 0xc3, 0xf0, 0x03, 0xc0, 0xc0, 0x03, 0xc3, 0xc3, 0xc3, 0xf0, 0x03, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};

// 'sprite_0', 12x9px
const unsigned char battery_0 [] PROGMEM = {
	0xff, 0xe0, 0xfb, 0xe0, 0xfb, 0xf0, 0xfb, 0xf0, 0xfb, 0xf0, 0xfb, 0xf0, 0xff, 0xf0, 0xfb, 0xe0, 
	0xff, 0xe0
};
// 'sprite_1', 12x9px
const unsigned char battery_1 [] PROGMEM = {
	0xff, 0xe0, 0x9f, 0xe0, 0x9f, 0xf0, 0x9f, 0xf0, 0x9f, 0xf0, 0x9f, 0xf0, 0x9f, 0xf0, 0x9f, 0xe0, 
	0xff, 0xe0
};
// 'sprite_2', 12x9px
const unsigned char battery_2 [] PROGMEM = {
	0xff, 0xe0, 0x83, 0xe0, 0x83, 0xf0, 0x83, 0xf0, 0x83, 0xf0, 0x83, 0xf0, 0x83, 0xf0, 0x83, 0xe0, 
	0xff, 0xe0
};
// 'sprite_3', 12x9px
const unsigned char battery_3 [] PROGMEM = {
	0xff, 0xe0, 0x80, 0x20, 0x80, 0x30, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x30, 0x80, 0x20, 
	0xff, 0xe0
};
// 'sprite_4', 12x9px
const unsigned char battery_4 [] PROGMEM = {
	0x00, 0x00, 0x1f, 0x00, 0x31, 0xc0, 0xe0, 0x40, 0x01, 0xc0, 0xe0, 0x40, 0x31, 0xc0, 0x1f, 0x00, 
	0x00, 0x00
};


#endif